{
    // To install as global settings, drop this file to: <global_vscode_dir>/User/snippets/
    // To install as a per-project, drop this file to: <project_dir>/.vscode/
	"sm-entrypoint/train": {
		"scope": "python",
		"prefix": "sm-entrypoint/train",
		"body": [
			"import argparse",
			"import os",
			"from pathlib import Path",
			"",
			"def main(args):",
			"\t\"\"\"Training implementation.\"\"\"",
			"\t${1:raise NotImplementedError()  # FIXME}",
			"",
			"if __name__ == \"__main__\":",
			"\tparser = argparse.ArgumentParser()",
			"\t# Minimum args according to SageMaker protocol",
			"\tparser.add_argument(\"--model_dir\", type=Path, default=os.environ.get(\"SM_MODEL_DIR\", \"model\"))",
			"\tparser.add_argument(\"--train\", type=Path, default=os.environ.get(\"SM_CHANNEL_TRAIN\", \"train\"))",
			"\tparser.add_argument(\"--test\", type=Path, default=os.environ.get(\"SM_CHANNEL_TEST\", \"test\"))",
			"",
			"\targs = parser.parse_known_args()",
			"\tmain(args)",
			""
		]
	},
	"sm-entrypoint/train2": {
		"scope": "python",
		"prefix": "sm-entrypoint/train2",
		"body": [
			"import argparse",
			"import os",
			"from pathlib import Path",
			"from typing import Any, Dict",
			"",
			"def main(args):",
			"\t\"\"\"Training implementation.\"\"\"",
			"\t${1:actual_train(args.model_dir, args.train, args.test, **hyperopts)  # FIXME: this is just an example}",
			"",
			"",
			"def parse_hyperparameters(hm) -> Dict[str, Any]:",
			"\t\"\"\"Convert list of ['--name', 'value', ...] to { 'name': value}, where 'value' is converted to the nearest data type.",
			"",
			"\tConversion follows the principle: \"if it looks like a duck and quacks like a duck, then it must be a duck\".",
			"\t\"\"\"",
			"\td = {}",
			"\tit = iter(hm)",
			"\ttry:",
			"\t\twhile True:",
			"\t\t\tkey = next(it)[2:]",
			"\t\t\tvalue = next(it)",
			"\t\t\td[key] = value",
			"\t\texcept StopIteration:",
			"\t\t\tpass",
			"",
			"\t# Infer data types.",
			"\tdd = {k: infer_dtype(v) for k, v in d.items()}",
			"\treturn dd",
			"",
			"",
			"def infer_dtype(s):",
			"\t\"\"\"Auto-cast string values to nearest matching datatype.",
			"",
			"\tConversion follows the principle: \"if it looks like a duck and quacks like a duck, then it must be a duck\".",
			"\tNote that python 3.6 implements PEP-515 which allows '_' as thousand separators. Hence, on Python 3.6,",
			"\t'1_000' is a valid number and will be converted accordingly.",
			"\t\"\"\"",
			"\tif s == \"None\":",
			"\t\treturn None",
			"\tif s == \"True\":",
			"\t\treturn True",
			"\tif s == \"False\":",
			"\t\treturn False",
			"",
			"\ttry:",
			"\t\ti = float(s)",
			"\t\tif (\".\" in s) or (\"e\" in s.lower()):",
			"\t\t\treturn i",
			"\t\telse:",
			"\t\t\treturn int(s)",
			"\texcept:  # noqa:E722",
			"\t\tpass",
			""
			"\treturn s"
			"",
			"",
			"if __name__ == \"__main__\":",
			"\tparser = argparse.ArgumentParser()",
			"\t# Minimum args according to SageMaker protocol",
			"\tparser.add_argument(\"--model_dir\", type=Path, default=os.environ.get(\"SM_MODEL_DIR\", \"model\"))",
			"\tparser.add_argument(\"--train\", type=Path, default=os.environ.get(\"SM_CHANNEL_TRAIN\", \"train\"))",
			"\tparser.add_argument(\"--test\", type=Path, default=os.environ.get(\"SM_CHANNEL_TEST\", \"test\"))",
			"",
			"\targs, train_args = parser.parse_known_args()",
			"\thyperopts = parse_hyperparameters(train_args)",
			"\tmain(args, hyperopts)",
			""
		]
	},
	"sm-entrypoint/transform": {
		"scope": "python",
		"prefix": "sm-entrypoint/transform",
		"body": [
			"def model_fn(model_dir):",
			"\t\"\"\"Load model from a directory.\"\"\"",
			"\t${1:return ...  # FIXME}",
			"",
			""
			"def input_fn(request_body, request_content_type):",
			"\t\"\"\"Deserializes request data into an object accepted by the predictor (i.e., model).\"\"\"",
			"\t${2:return ...  # FIXME}",
			"",
			"",
			"def predict_fn(input_object, model):",
			"\t\"\"\"Takes the deserialized request object and performs inference against the loaded model.\"\"\"",
			"\t${3:return ...  # FIXME}",
			"",
			"",
			"def output_fn(prediction, content_type):",
			"\t\"\"\"Takes the prediction result and serializes it according to the response content type.\"\"\"",
			"\t${4:return ...  # FIXME}",
			""
		]
	}
}